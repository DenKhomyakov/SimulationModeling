import random
import numpy as np

# p - список вероятностей

# Предположим, у нас есть распределение вероятностей p = [0.1, 0.2, 0.3, 0.4]
# Если randomValue = 0.25, то:
# На первой итерации cumulativeProbability = 0.1
# На второй итерации cumulativeProbability = 0.1 + 0.2 = 0.3, в данном случае randomValue < cumulativeProbability
# Поэтому возвращается индекс 1

# Генератор дискретной случайной величины (ДСВ)
def discreteRandomVariableGenerator(p):
    # Генерируем случайное число от 0 до 1, которое используется для определения того, какое число будет возвращено
    randomValue = random.random()

    # Находим индекс, соответствующий сгенерированному числу (определяем, в какой интервал вероятностей попадает случайное число)
    cumulativeProbability = 0

    # i - индекс текущего значения в саиске вероятностей, pCurrentValue - вероятность текущего значения
    # enumerate(p) - проход по списку p для получения индекса и значения на каждой итерации
    for i, pCurrentValue in enumerate(p):
        # Накапливаем вероятности, чтобы определить, в какой интервал попадает случайное число
        cumulativeProbability += pCurrentValue
        # Если случайное число меньше накопленного начения, то оно попало в интервал, соответствующий текущему индексу
        if randomValue < cumulativeProbability:
            return i

# Игральная кость
def dice(gamesNumber):
    # Распределение вероятностей выпадений различных сумм при броске двух шестигранных кубиков
    # Каждый шестигранный кубик может выдать только одно из шести значений (от 1 до 6)
    # Существует всего 6 * 6 = 36 возможных исходов, сумма на двух кубиках варьируется от 2 до 12
    # Например, для суммы 2 существует всего одна комбинация - (1, 1), значит, вероятность - 1 / 36
    # Например, для суммы 3 существуют две комбинации - (1, 2) и (2, 1), значит, вероятность - 2 / 36
    # Например, для суммы 7 возможны шесть комбинаций - (1, 6), (2, 5), (3, 4), (4, 3), (5, 2), (6, 1), значит, вероятность - 6 / 36
    p = [1 / 36, 2 / 36, 3 / 36, 4 / 36, 5 / 36, 6 / 36, 5 / 36, 4 / 36, 3 / 36, 2 / 36, 1 / 36]

    # Список всех возможных сумм, которые могут выпасть при броске 2 кубиков - от 2 до 12
    twoDiceSum = list(range(2, 13))

    # Общий выигрыш
    totalWinnings = 0

    # Цикл по количеству игр
    for _ in range(gamesNumber):
        # Бросок первого игрока
        sumPlayer1 = twoDiceSum[discreteRandomVariableGenerator(p)]

        # Бросок второго игрока
        sumPlayer2 = twoDiceSum[discreteRandomVariableGenerator(p)]

        if sumPlayer1 > sumPlayer2:
            totalWinnings += 1
        elif sumPlayer1 < sumPlayer2:
            totalWinnings -= 1
        # В случае ничьей ничего не меняем

    # Средний выигрыш первого игрока
    return totalWinnings / gamesNumber

# Список количества игр
gamesList = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]

# Запуск тестов
for gamesNumber in gamesList:
    averageWinnings = dice(gamesNumber)
    print(f"Средний выигрыш первого игрока за {gamesNumber} игр: {averageWinnings}")
